{
	"name": "dataflow7",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "sinktable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Fact_Stock_Price_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable3",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "Existingrows"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          avgTotalVolume as integer,",
				"          calculationPrice as string,",
				"          change as double,",
				"          changePercent as double,",
				"          close as string,",
				"          closeSource as string,",
				"          closeTime as string,",
				"          companyName as string,",
				"          currency as string,",
				"          delayedPrice as string,",
				"          delayedPriceTime as string,",
				"          extendedChange as string,",
				"          extendedChangePercent as string,",
				"          extendedPrice as string,",
				"          extendedPriceTime as string,",
				"          high as string,",
				"          highSource as string,",
				"          highTime as string,",
				"          iexAskPrice as integer,",
				"          iexAskSize as integer,",
				"          iexBidPrice as integer,",
				"          iexBidSize as integer,",
				"          iexClose as double,",
				"          iexCloseTime as integer,",
				"          iexLastUpdated as integer,",
				"          iexMarketPercent as double,",
				"          iexOpen as double,",
				"          iexOpenTime as integer,",
				"          iexRealtimePrice as double,",
				"          iexRealtimeSize as integer,",
				"          iexVolume as integer,",
				"          lastTradeTime as integer,",
				"          latestPrice as double,",
				"          latestSource as string,",
				"          latestTime as string,",
				"          latestUpdate as integer,",
				"          latestVolume as string,",
				"          low as string,",
				"          lowSource as string,",
				"          lowTime as string,",
				"          marketCap as integer,",
				"          oddLotDelayedPrice as string,",
				"          oddLotDelayedPriceTime as string,",
				"          open as string,",
				"          openTime as string,",
				"          openSource as string,",
				"          peRatio as double,",
				"          previousClose as double,",
				"          previousVolume as integer,",
				"          primaryExchange as string,",
				"          symbol as string,",
				"          volume as string,",
				"          week52High as double,",
				"          week52Low as double,",
				"          ytdChange as double,",
				"          isUSMarketOpen as boolean,",
				"          exchange as string,",
				"          industry as string,",
				"          website as string,",
				"          description as string,",
				"          CEO as string,",
				"          securityName as string,",
				"          issueType as string,",
				"          sector as string,",
				"          primarySicCode as integer,",
				"          employees as integer,",
				"          tags as string[],",
				"          address as string,",
				"          address2 as string,",
				"          state as string,",
				"          city as string,",
				"          zip as string,",
				"          country as string,",
				"          phone as string,",
				"          effectiveIntegrationRuntime as string,",
				"          executionDuration as integer,",
				"          durationInQueue as (integrationRuntimeQueue as integer),",
				"          billingReference as (activityType as string, billableDuration as (meterType as string, duration as double, unit as string)[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source(output(",
				"          SurrKey as integer,",
				"          Company_id as string,",
				"          company_name as string,",
				"          currency as string,",
				"          LatestPrice as double,",
				"          dayLow as string,",
				"          dayHigh as string,",
				"          IsActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sinktable",
				"source1 derive(IsActive = 1) ~> derivedColumn1",
				"sinktable select(mapColumn(",
				"          SQL_SurrKey = SurrKey,",
				"          SQL_Company_id = Company_id,",
				"          SQL_company_name = company_name,",
				"          SQL_currency = currency,",
				"          SQL_LatestPrice = LatestPrice,",
				"          SQL_dayLow = dayLow,",
				"          SQL_dayHigh = dayHigh,",
				"          SQL_IsActive = IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, select1 lookup(symbol == SQL_Company_id,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(SQL_Company_id)) ~> Existingrows",
				"Existingrows select(mapColumn(",
				"          SQL_SurrKey,",
				"          SQL_Company_id,",
				"          SQL_company_name,",
				"          SQL_currency,",
				"          SQL_LatestPrice,",
				"          SQL_dayLow,",
				"          SQL_dayHigh,",
				"          SQL_IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(SQL_IsActive = 0) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SurrKey as integer,",
				"          Company_id as string,",
				"          company_name as string,",
				"          currency as string,",
				"          LatestPrice as double,",
				"          dayLow as double,",
				"          dayHigh as double,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Company_id = symbol,",
				"          company_name = companyName,",
				"          currency,",
				"          LatestPrice = latestPrice,",
				"          dayLow = low,",
				"          dayHigh = high,",
				"          IsActive",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SurrKey as integer,",
				"          Company_id as string,",
				"          company_name as string,",
				"          currency as string,",
				"          LatestPrice as double,",
				"          dayLow as string,",
				"          dayHigh as string,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['SurrKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurrKey = SQL_SurrKey,",
				"          Company_id = SQL_Company_id,",
				"          company_name = SQL_company_name,",
				"          currency = SQL_currency,",
				"          LatestPrice = SQL_LatestPrice,",
				"          dayLow = SQL_dayLow,",
				"          dayHigh = SQL_dayHigh,",
				"          IsActive = SQL_IsActive",
				"     )) ~> sink2"
			]
		}
	}
}